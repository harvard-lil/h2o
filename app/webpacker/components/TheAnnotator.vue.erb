<% include Rails.application.routes.url_helpers %>

<template>
<div id="vue_annotator" v-if="mode != 'inactive'" :style="'{top: `${offset}`}'">
  <div class="annotator-inner">
    <template v-if="mode == 'create-menu'">
      <a @click="create('highlight')">Highlight</a>
      <a @click="create('elide')">Elide</a>
      <a @click="create('replace')">Replace</a>
      <a @click="mode = 'new-link'">Add link</a>
      <a @click="mode = 'new-note'">Add note</a>
    </template>
    <form v-else-if="mode == 'new-link'" v-on:submit.prevent="submit('link')" class="create-form">
      <input name="content" type="url" placeholder="Paste URL" />
    </form>
    <form v-else-if="mode == 'new-note'" v-on:submit.prevent="submit('note')" class="create-form">
      <textarea name="content" placeholder="Note text..."></textarea>
      <input class="save-note" type="submit" value="Save" />
    </form>
    <form v-else-if="mode == 'edit-link'" v-on:submit.prevent="updateLink">
      <input name="content" type="url" placeholder="Url to link to..." value="${(this.getLinkValue())}" />
    </form>
    <template v-else-if="mode == 'edit-handle'">
      <a v-if="annotationType == 'highlight'" @click="destroy">Remove highlighting</a>
      <a v-if="annotationType == 'elide'" @click="destroy">Remove elision</a>
      <template v-if="annotationType == 'replace'">
        <a @click="reveal">Reveal original text</a>
        <a @click="destroy">Remove replacement text</a>
      </template>
      <template v-if="annotationType == 'link'">
        <a @click="destroy">Remove link</a>
        <a class="edit-link" @click="editLink">Edit link</a>
      </template>
      <a v-if="annotationType == 'note'" @click="destroy">Remove Note</a>
    </template>
    <template v-else-if="mode == 'save-changes'">
      <a @click="saveChanges">Save</a>
      <a @click="cancelChanges('elide')">Cancel</a>
    </template>
  </div>
</div>
</template>

<script>
import {offsetsForRange, closestP, getCaretCharacterOffsetWithin, offsetInParagraph} from 'lib/ui/content/annotations/placement';

export default {
  props: {
    mode: {
      type: String,
      default: "inactive"
    },
    range: {
      type: Range,
      default: null
    }
  },
  data: () => ({
    newAnnotationType: "",
    annotationType: ""
  }),
  computed: {
    offset() {
      let wrapperRect = document.querySelector('.resource-wrapper').getBoundingClientRect();
      let viewportTop = window.scrollY - (wrapperRect.top + window.scrollY);
      
      let target = this.range || this.handle;
      this.targetRect = target ? target.getBoundingClientRect() : this.targetRect || {top: 0, bottom: 0};
      
      return Math.min(Math.max(this.targetRect.top - wrapperRect.top,
                               viewportTop + 20),
                      this.targetRect.bottom - wrapperRect.top).toString(10) + "px";
    },
    resourceId() {
      return document.querySelector('header.casebook').dataset.resourceId
    },
    annotationsPath() {
      return '<%= resource_annotations_path('$RESOURCE_ID') %>'.replace('$RESOURCE_ID', this.resourceId)
    },
    offsets() {
      return offsetsForRange(this.range);
    }
  },
  methods: {
    annotationPath(annotationId) {
      return '<%= resource_annotation_path('$RESOURCE_ID', '$ANNOTATION_ID') %>'.replace('$RESOURCE_ID', this.resourceId).replace('$ANNOTATION_ID', annotationId);
    },
    create(type) {
      this.createApi(type);
    },
    destroy() {
      alert("destroy")
    },
    reveal() {
      alert("reveal")
    },
    saveChanges() {
      alert("save changes");
    },
    cancelChanges(type) {
      alert(type)
    },
    editLink() {
      alert("edit link");
    },
    updateLink() {
      alert("update link");
    },
    submit(type) {
      alert("submit");
    },
    createApi(type, content = null) {
      this.axios.post(this.annotationsPath + '.json', {
        annotation: {
          kind: type,
          content: content,
          start_paragraph: this.offsets.start.p,
          start_offset: this.offsets.start.offset,
          end_paragraph: this.offsets.end.p,
          end_offset: this.offsets.end.offset
        }
      }, { scroll: false })
        .then( response => {
          window.location.search = `annotation-id=${response.data.annotation_id}`;
        });
    },
    updateApi(annotationId, attrs) {
      this.axios.patch(this.annotationPath(annotationId + '.json'), 
                  { annotation: attrs }, { scroll: false })
        .then( _ => this.deactivate() );
    }
  }
}
</script>

<style lang="scss" scoped>
@import '../styles/vars_and_mixins';

#vue_annotator {
  @include square(0);
  @include transition(top 0.1s linear);
  display: block;
  position: absolute;
  right: 0;
  overflow: visible;
  user-select: none;
}

.hide .annotator-inner {
  max-width: 0px;
  padding: 10px 0;
  border-width: 1px 0;
}

a {
  @include sans-serif($regular, 12px, 14px);
  cursor: pointer;
  white-space: nowrap;
  background-color: $white;
  &:hover {
    background-color: $highlight;
  }
}

.annotator-inner {
  @include transition(max-width 0.1s linear, padding 0.1s linear, border-width 0.1s linear);
  position: absolute;
  left: 40px;
  padding: 10px;
  max-width: 200px;
  overflow: hidden;
  background-color: $white;
  border: 1px solid black;
  z-index: 2;
  margin-left: 20px;
}

.create-form {
  display: flex;
  flex-direction: column;
  
  .save-note {
    margin-top: 20px;
  }
}
</style>
