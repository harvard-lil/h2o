<% include Rails.application.routes.url_helpers %>

import AxiosConfig from 'axios';
import {html, raw} from 'es6-string-html-template';
import {post, patch, rest_delete} from 'lib/requests';
import throttle from 'lodash.throttle';
import Component from 'lib/ui/component'

import {offsetsForRange, closestP, getCaretCharacterOffsetWithin, offsetInParagraph} from 'lib/ui/content/annotations/placement';
import {toggleElisionVisibility} from 'lib/ui/content/annotations/elide';

const csrf_el = document.querySelector('meta[name=csrf-token]'),
      headers = csrf_el ? {'X-CSRF-Token': csrf_el.getAttribute('content')} : {};
let Axios = AxiosConfig.create({headers: headers});

export class Annotator extends Component {
  constructor () {
    super({
      id: 'annotator',
      events: {
        'click .annotator-action': e => { this.doAnnotationAction(e); },
        'submit .create-form': e => { this.submitAnnotationForm(e); e.preventDefault(); },
        'submit .update-link': e=> { 
          e.preventDefault();
          e.stopPropagation();
          this.updateAnnotation(this.handle.dataset.annotationId, {content: e.target[0].value});
        }
      }
    });

    this.updateScroll = throttle(this.render, 100, {leading: true, trailing: true});
    document.querySelector('.resource-wrapper').appendChild(this.el);
    this.mode = 'inactive';
    this.render();
  }

  doAnnotationAction (e) {
    switch (e.target.dataset.annotateAction) {
    case 'new':
      this.new(e.target.dataset.annotationType);
      return;
    case 'create':
      this.saveAnnotation(e.target.dataset.annotationType, this.offsets);
      break;
    case 'edit-link':
      this.mode = 'edit-link';
      this.render();
      return;
    case 'convert':
      this.convertAnnotation(this.handle.dataset.annotationId, e.target.dataset.annotationType);
      break;
    case 'reveal':
      this.revealReplacedText(this.handle.dataset.annotationId);
      break;
    case 'save-changes':
      this.updateAnnotation(this.handle.dataset.annotationId, this.stagedChanges);
      return;
    case 'cancel-changes':
      if (this.handle.dataset.annotationType === 'replace') {
        this.handle.nextElementSibling.querySelector('.text').innerText = this.previousContent;
      }
      break;
    case 'destroy':
      this.destroyAnnotation(this.handle.dataset.annotationId);
      break;
    }
    this.deactivate();
  }

  new (type) {
    this.mode = 'new-form';
    this.newAnnotationType = type;
    this.render();
  }

  saveAnnotation (type, offsets, content = null) {
    Axios.post(this.annotationsPath() + '.json', {
      annotation: {
        kind: type,
        content: content,
        start_paragraph: offsets.start.p,
        start_offset: offsets.start.offset,
        end_paragraph: offsets.end.p,
        end_offset: offsets.end.offset
      }
    }, { scroll: false })
    .then( response => {
      window.location.search = `annotation-id=${response.data.annotation_id}`;
    });
  }

  convertAnnotation (annotationId, type) {
    patch(this.annotationPath(annotationId), {
      annotation: { kind: type }}, { scroll: false })
    .then( _ => window.getSelection().removeAllRanges());
  }

  revealReplacedText(annotationId) {
    let elisions = document.querySelectorAll(`.annotate.replaced[data-annotation-id="${annotationId}"]`);
    let button = document.querySelector(`.annotate.replacement[data-annotation-id="${annotationId}"]`);
    toggleElisionVisibility(annotationId, 'replace', button, elisions);
  }

  updateAnnotation (annotationId, attrs) {
    Axios.patch(this.annotationPath(annotationId + '.json'), 
      { annotation: attrs }, { scroll: false })
    .then( _ => this.deactivate() );
  }

  deactivate () {
    this.mode = 'inactive';
    this.handle = null;
    this.range = null;
    this.updateScroll.cancel();
    this.render();
  }

  destroyAnnotation (annotationId) {
    rest_delete(this.annotationPath(annotationId), {}, { scroll: false })
    .then( _ => window.getSelection().removeAllRanges());
  }

  template () {
    let inner;
    switch (this.mode) {
    case 'inactive':
      inner = '';
    case 'create-menu':
      inner = this.menuTemplate();
      break;
    case 'edit-handle':
      inner = this.editTemplate();
      break;
    case 'new-form':
      inner = this.newTemplate();
      break;
    case 'edit-link':
      inner = this.editLinkTemplate();
      break;
    case 'save-changes':
      inner = this.saveTemplate();
      break;
    }
    return html`<div id="annotator" class="${this.mode == 'inactive' ? 'hide' : ''}" style="top: ${this.calcTopOffset().toString(10)}px">
      <div class="annotator-inner">
        ${raw(inner)}
      </div>
    </div>`;
  }

  menuTemplate () {
    return html`
      <a class="annotator-action" data-annotate-action="create" data-annotation-type="highlight">Highlight</a>
      <a class="annotator-action" data-annotate-action="create" data-annotation-type="elide">Elide</a>
      <a class="annotator-action" data-annotate-action="create" data-annotation-type="replace">Replace</a>
      <a class="annotator-action" data-annotate-action="new" data-annotation-type="link">Add link</a>
      <a class="annotator-action" data-annotate-action="new" data-annotation-type="note">Add note</a>`;
  }

  newTemplate () {
    switch (this.newAnnotationType) {
    case 'link':
      return html`
        <form class="create-form" data-annotation-type="link">
          <input name="content" type="url" placeholder="Paste URL"  />
        </form>`;
    case 'note':
      return html`
        <form class="create-form" data-annotation-type="note">
          <textarea name="content" placeholder="Note text..."></textarea>
          <input class="save-note" type="submit" value="Save" />
        </form>`;
    }
  }

  editTemplate () {
    switch (this.handle.dataset.annotationType) {
    case 'highlight':
      return html`
        <a class="annotator-action" data-annotate-action="destroy">Remove highlighting</a>`;
    case 'elide':
      return html`
        <a class="annotator-action" data-annotate-action="destroy">Remove elision</a>`;
    case 'replace':
      return html`
        <a class="annotator-action" data-annotate-action="reveal">Reveal original text</a>
        <a class="annotator-action" data-annotate-action="destroy">Remove replacement text</a>`;
    case 'link':
      return html`
        <a class="annotator-action" data-annotate-action="destroy">Remove link</a>
        <a class="annotator-action edit-link" data-annotate-action="edit-link" data-annotation-type="link">Edit link</a>`;
    case 'note':
      return html`
        <a class="annotator-action" data-annotate-action="destroy">Remove Note</a>`;
    }
  }

  editLinkTemplate() {
    return html`
      <form class="update-link" data-annotation-type="link">
        <input name="content" type="url" placeholder="Url to link to..." value=${(this.getLinkValue())} />
      </form>`;
  }

  saveTemplate () {
    return html`
      <a class="annotator-action" data-annotate-action="save-changes">Save</a>
      <a class="annotator-action" data-annotate-action="cancel-changes" data-annotation-type="elide">Cancel</a>`;
  }

  submitAnnotationForm (e) {
    let field = e.target.querySelector('[name=content]');
    this.saveAnnotation(e.target.dataset.annotationType, this.offsets, field.value);
    this.deactivate();
    e.stopPropagation();
    e.preventDefault();
  }

  destroy () {
    super.destroy();
    this.updateScroll.cancel();
  }

  annotationsPath () {
    return '<%= resource_annotations_path('$RESOURCE_ID') %>'.replace('$RESOURCE_ID', this.resourceId());
  }

  annotationPath (annotationId) {
    return '<%= resource_annotation_path('$RESOURCE_ID', '$ANNOTATION_ID') %>'.replace('$RESOURCE_ID', this.resourceId()).replace('$ANNOTATION_ID', annotationId);
  }

  resourceId () {
    return document.querySelector('header.casebook').dataset.resourceId;
  }

  getLinkValue () {
    return this.handle.nextElementSibling.href;
  }

  calcTopOffset() {
    let wrapperRect = document.querySelector('.resource-wrapper').getBoundingClientRect();
    let viewportTop = window.scrollY - (wrapperRect.top + window.scrollY);

    let target = this.range || this.handle;
    this.targetRect = target ? target.getBoundingClientRect() : this.targetRect || {top: 0, bottom: 0};

    return Math.min(Math.max(this.targetRect.top - wrapperRect.top,
      viewportTop + 20),
      this.targetRect.bottom - wrapperRect.top);
  }

  // the following functions are used in annotations/index.js
  changeAnnotation (annotationId, attrs) {
    this.stagedChanges = attrs;
    this.mode = 'save-changes';
    this.render();
  } 

  select (range) {
    this.mode = 'create-menu';
    this.handle = null;
    this.offsets = offsetsForRange(range);
    if (!this.offsets) { return this.deactivate(); }
    this.range = range;
    this.render();
  }

  edit (handle) {
    this.mode = 'edit-handle';
    this.handle = handle;
    this.range = null;
    this.render();
  }
}

